{"version":3,"sources":["components/Note.js","services/notes.js","components/Notification.js","services/login.js","App.js","index.js"],"names":["Note","noteOf","toggleImportance","label","important","className","content","onClick","id","token","getAll","request","axios","get","nonServerNote","date","then","response","data","concat","create","newObject","a","config","headers","Authorization","post","update","put","setToken","newToken","Notification","message","status","login","credentials","App","useState","notes","setNotes","newNote","setNewNote","showAll","setShowAll","errorMessage","setErrorMessage","setstatus","username","setUsername","password","setPassword","user","setUser","useEffect","noteService","initialNotes","addNote","event","preventDefault","noteObject","Date","toISOString","Math","random","console","log","returnedNote","setTimeout","handleNoteChange","target","value","note","find","n","changedNote","map","catch","error","filter","notesToShow","Footer","style","color","fontStyle","fontSize","handleLogin","loginService","onSubmit","type","onChange","name","key","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.b348bd73.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Note = ({ noteOf, toggleImportance }) => {\r\n  const label = noteOf.important ? \"make not important\" : \"make important\";\r\n  return (\r\n    <li className=\"note\">\r\n      {noteOf.content}\r\n      <button onClick={() => toggleImportance(noteOf.id)}>{label}</button>\r\n    </li>\r\n  );\r\n};\r\n\r\nexport default Note;\r\n","import axios from \"axios\";\r\n\r\nconst baseURL = \"/api/notes\";\r\n\r\nlet token = null;\r\n\r\nconst setToken = (newToken) => {\r\n  token = `bearer ${newToken}`;\r\n};\r\n\r\nconst getAll = () => {\r\n  const request = axios.get(baseURL);\r\n  const nonServerNote = {\r\n    content: \"Not in Server\",\r\n    date: \"2020-10-26T07:14:24.433Z\",\r\n    important: false,\r\n    id: 10000,\r\n  };\r\n  return request.then((response) => response.data.concat(nonServerNote));\r\n};\r\n\r\nconst create = async (newObject) => {\r\n  const config = {\r\n    headers: {\r\n      Authorization: token,\r\n    },\r\n  };\r\n  const response = await axios.post(baseURL, newObject, config);\r\n  return response.data;\r\n};\r\n\r\nconst update = (id, newObject) => {\r\n  const request = axios.put(`${baseURL}/${id}`, newObject);\r\n  return request.then((response) => response.data);\r\n};\r\n\r\nexport default {\r\n  getAll,\r\n  create,\r\n  update,\r\n  setToken,\r\n};\r\n// we can do this when the names of the keys and the values are the same.\r\n","import React from \"react\";\r\n\r\nconst Notification = ({ message, status }) => {\r\n  if (message === null) {\r\n    return null;\r\n  }\r\n\r\n  return <div className={status}>{message}</div>;\r\n};\r\n\r\nexport default Notification;\r\n","import axios from \"axios\";\r\n\r\nconst baseURL = \"/api/login\";\r\n\r\nconst login = async (credentials) => {\r\n  const response = await axios.post(baseURL, credentials);\r\n  return response.data;\r\n};\r\n\r\nexport default { login };\r\n","import React, { useState, useEffect } from \"react\";\r\nimport \"./index.css\";\r\nimport Note from \"./components/Note\";\r\nimport noteService from \"./services/notes\";\r\nimport Notification from \"./components/Notification\";\r\nimport loginService from \"./services/login\";\r\n\r\nconst App = () => {\r\n  const [notes, setNotes] = useState([]);\r\n  const [newNote, setNewNote] = useState(\"\");\r\n  const [showAll, setShowAll] = useState(true);\r\n  const [errorMessage, setErrorMessage] = useState(null);\r\n  const [status, setstatus] = useState(\"\");\r\n  const [username, setUsername] = useState(\"\");\r\n  const [password, setPassword] = useState(\"\");\r\n  const [user, setUser] = useState(null);\r\n\r\n  useEffect(() => {\r\n    noteService.getAll().then((initialNotes) => {\r\n      setNotes([...initialNotes]);\r\n    });\r\n  }, []);\r\n\r\n  // console.log(\"render\", notes.length, \"notes\");\r\n\r\n  const addNote = (event) => {\r\n    event.preventDefault();\r\n    const noteObject = {\r\n      content: newNote,\r\n      date: new Date().toISOString(),\r\n      important: Math.random() >= 0.5,\r\n      // the NoteiD is automatically added in the server side in the JSOn server - the Date and time is also added added this way later on\r\n    };\r\n\r\n    console.log(noteObject, \"before post\");\r\n    noteService.create(noteObject).then((returnedNote) => {\r\n      setNotes(notes.concat(returnedNote));\r\n      setNewNote(\"\");\r\n      setErrorMessage(`${returnedNote.content} was successfully added`);\r\n      setstatus(\"success\");\r\n      setTimeout(() => {\r\n        setErrorMessage(null);\r\n        setstatus();\r\n      });\r\n    });\r\n  };\r\n\r\n  const handleNoteChange = (event) => {\r\n    setNewNote(event.target.value);\r\n  };\r\n\r\n  const toggleImportance = (id) => {\r\n    console.log(`importance of ${id} needs to be toggled`);\r\n    // this is not Local - making changes in the sserver - setNotes();\r\n    const note = notes.find((n) => n.id === id);\r\n    const changedNote = { ...note, important: !note.important };\r\n\r\n    noteService\r\n      .update(id, changedNote)\r\n      .then((returnedNote) =>\r\n        setNotes(notes.map((note) => (note.id === id ? returnedNote : note)))\r\n      )\r\n      .catch((error) => {\r\n        setErrorMessage(`${note.content} was already removed from the server`);\r\n        setTimeout(() => setErrorMessage(null), 3000);\r\n        setNotes(notes.filter((n) => n.id !== id));\r\n      });\r\n  };\r\n\r\n  const notesToShow = showAll ? notes : notes.filter((note) => note.important);\r\n\r\n  ///Footer\r\n  const Footer = () => {\r\n    const footerStyle = {\r\n      color: \"green\",\r\n      fontStyle: \"italic\",\r\n      fontSize: 16,\r\n    };\r\n\r\n    return (\r\n      <div style={footerStyle}>\r\n        <br />\r\n        <em>\r\n          Note-App, Department of Computer Science, University of helsinki 2020\r\n        </em>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  const handleLogin = async (event) => {\r\n    event.preventDefault();\r\n\r\n    try {\r\n      const user = await loginService.login({ username, password });\r\n      setUser(user);\r\n      noteService.setToken(user.token);\r\n      setUsername(\"\");\r\n      setPassword(\"\");\r\n    } catch (error) {\r\n      setErrorMessage(\"wrong Credentials\");\r\n      setstatus(\"error\");\r\n      setTimeout(() => {\r\n        setErrorMessage(null);\r\n        setstatus(\"\");\r\n      }, 2000);\r\n    }\r\n  };\r\n\r\n  const loginform = () => {\r\n    return (\r\n      <form onSubmit={handleLogin}>\r\n        <div>\r\n          <label> username:</label>\r\n          <input\r\n            type=\"text\"\r\n            value={username}\r\n            onChange={(event) => setUsername(event.target.value)}\r\n            name=\"username\"\r\n          />\r\n        </div>\r\n        <div>\r\n          <label>Password:</label>\r\n          <input\r\n            type=\"password\"\r\n            value={password}\r\n            onChange={(event) => {\r\n              setPassword(event.target.value);\r\n            }}\r\n            name=\"password\"\r\n          />\r\n        </div>\r\n        <button type=\"submit\">login</button>\r\n      </form>\r\n    );\r\n  };\r\n\r\n  const noteForm = () => {\r\n    return (\r\n      <form onSubmit={addNote}>\r\n        <input type=\"text\" value={newNote} onChange={handleNoteChange} />\r\n        <button type=\"submit\">Save</button>\r\n      </form>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h1> Notes</h1>\r\n      <Notification message={errorMessage} status={status} />\r\n\r\n      {user === null ? (\r\n        loginform()\r\n      ) : (\r\n        <div>\r\n          <p>{user.name} is logged in</p>\r\n          {noteForm()}\r\n        </div>\r\n      )}\r\n      <div>\r\n        <button onClick={() => setShowAll(!showAll)}>\r\n          {showAll ? \"Important\" : \"All\"}\r\n        </button>\r\n      </div>\r\n      <ul>\r\n        {notesToShow.map((note) => (\r\n          <Note\r\n            key={note.id}\r\n            noteOf={note}\r\n            toggleImportance={toggleImportance}\r\n          />\r\n        ))}\r\n      </ul>\r\n\r\n      <Footer />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","//\r\nimport React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\n\r\nconst notes = [\r\n  {\r\n    id: 1,\r\n    content: \"HTML is easy\",\r\n    date: \"2019-05-30T17:30:31.098Z\",\r\n    important: true,\r\n  },\r\n  {\r\n    id: 2,\r\n    content: \"Browser can execute only Javascript\",\r\n    date: \"2019-05-30T18:39:34.091Z\",\r\n    important: false,\r\n  },\r\n  {\r\n    id: 3,\r\n    content: \"GET and POST are the most important methods of HTTP protocol\",\r\n    date: \"2019-05-30T19:20:14.298Z\",\r\n    important: true,\r\n  },\r\n];\r\n\r\nReactDOM.render(<App notes={notes} />, document.getElementById(\"root\"));\r\n// since we are going to be fetching the data from the Server there is no need to pass the props data to the components.\r\n\r\n////////\r\n// This is practise for Learning Axios\r\n////////\r\n\r\n// const promise = axios.get(\"http://localhost:3001/notes\").then((response) => {\r\n//   const notesServer = response.data;\r\n//   // the variable noteServer is not available outside of the context unless returned to promise\r\n//   console.log(response, \"hello\", notesServer, response.headers);\r\n//   return notesServer;\r\n// });\r\n\r\n/////////\r\n// below is a not-so-suitable method for rendering data from a server request\r\n/////////////\r\n// axios.get(\"http://localhost:3001/notes\").then((response) => {\r\n//   const notes = response.data;\r\n//   ReactDOM.render(<App notes={notes} />, document.getElementById(\"root\"));\r\n// });\r\n\r\n// console.log(\"Promise - single thread\", promise);\r\n\r\n/////////////////////////////////////////\r\n/////////////////////////////////////////\r\n/////////////////////////////////////////\r\n/////////////////////////////////////////\r\n/////////////////////////////////////////\r\n\r\n// const result = notes.map((note) => note.content);\r\n// console.log(result);\r\n\r\n// import Note from \"./components/Note.js\";\r\n\r\n// const Note = ({ noteOf }) => {\r\n//   return <li id={noteOf.id}>{noteOf.content}</li>;\r\n// };\r\n\r\n// const App = ({ notes }) => {\r\n//   // const { notes } = props;\r\n\r\n//   return (\r\n//     <div>\r\n//       <h1>Notes</h1>\r\n//       <ul>\r\n//         {notes.map((note) => (\r\n//           <Note key={note.id} noteOf={note} />\r\n//         ))}\r\n//       </ul>\r\n//     </div>\r\n//   );\r\n// };\r\n"],"sourceRoot":""}